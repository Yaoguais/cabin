syntax = "proto3";

package main;

import "google/api/annotations.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

service BrokerSvc {
    rpc Update (UpdateBrokerRequest) returns (Broker) {
        option (google.api.http) = {
            post: "/v1/broker/update"
            body: "*"
        };
    }
    rpc List (ListBrokerRequest) returns (ListBrokerResponse) {
        option (google.api.http) = {
            post: "/v1/broker/list"
            body: "*"
        };
    }
}

service IMSvc {
    rpc Publish (PublishRequest) returns (RetResponse) {
        option (google.api.http) = {
            post: "/v1/publish"
            body: "*"
        };
    }
}

service UserSvc {
    rpc Add (AddUserRequest) returns (User) {
        option (google.api.http) = {
            post: "/v1/user/add"
            body: "*"
        };
    }
    rpc Del (DelUserRequest) returns (User) {
        option (google.api.http) = {
            post: "/v1/user/del"
            body: "*"
        };
    }
    rpc Get (GetUserRequest) returns (User) {
        option (google.api.http) = {
            post: "/v1/user/get"
            body: "*"
        };
    }
}

service GroupSvc {
    rpc AddMembers (AddMembersRequest) returns (RetResponse) {
        option (google.api.http) = {
            post: "/v1/group/member/add"
            body: "*"
        };
    }
    rpc DelMembers (DelMembersRequest) returns (RetResponse) {
        option (google.api.http) = {
            post: "/v1/group/member/del"
            body: "*"
        };
    }
    rpc IsMember (IsMemberRequest) returns (RetResponse) {
        option (google.api.http) = {
            post: "/v1/group/is/member"
            body: "*"
        };
    }
    rpc ListMembers (ListMembersRequest) returns (ListMembersResponse) {
        option (google.api.http) = {
            post: "/v1/group/member/list"
            body: "*"
        };
    }
}

message UpdateBrokerRequest {
    string external = 1 [(validator.field) = {string_not_empty: true}];
    string internal = 2 [(validator.field) = {string_not_empty: true}];
    uint64 conn = 3;
    sint64 max_conn = 4;
}

message ListBrokerRequest {
}

message Broker {
    string external = 1;
    string internal = 2;
    uint64 conn = 3;
    sint64 max_conn = 4;
    int64  update_time = 5;
}

message ListBrokerResponse {
    repeated Broker brokers = 1;
}

message PublishRequest {
    string topic    = 1 [(validator.field) = {string_not_empty: true}];
    string payload  = 2 [(validator.field) = {string_not_empty: true}];
    sint32 qos      = 3 [(validator.field) = {int_gt: -1, int_lt: 3}];
    bool   retained = 4;
}

message RetResponse {
    bool ok = 1;
}

message User {
    string id       = 1 [(validator.field) = {string_not_empty: true}];
    string username = 2;
    string password = 3;
    string ip       = 4;
    string broker   = 5;
}

message AddUserRequest {
    string id       = 1;
    string username = 2;
    string password = 3;
    string ip       = 4;
}

message DelUserRequest {
    string username = 1;
}

message GetUserRequest {
    string username = 1;
}

message AddMembersRequest {
    string group_id = 1         [(validator.field) = {string_not_empty: true}];
    repeated string members = 2 [(validator.field) = {repeated_count_min: 1}];
}

message DelMembersRequest {
    string group_id = 1         [(validator.field) = {string_not_empty: true}];
    repeated string members = 2 [(validator.field) = {repeated_count_min: 1}];
}

message IsMemberRequest {
    string group_id  = 1 [(validator.field) = {string_not_empty: true}];
    string member_id = 2 [(validator.field) = {string_not_empty: true}];
}

message ListMembersRequest {
    string group_id = 1 [(validator.field) = {string_not_empty: true}];
}

message ListMembersResponse {
    repeated string members = 1;
}