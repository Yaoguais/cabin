set tabstop=4
set shiftwidth=4
set expandtab
"set number

" change \ to ,
" let mapleader = ","

" use "+y to copy to system clipboard
set clipboard+=unnamed
noremap <Leader>y "+y
noremap <Leader>yy "+yy
filetype plugin on
map <Leader>h :!cat /etc/vim/vimrc.local<CR>
map <Leader>zz :wqall!<CR>
map <Leader>xx :qall!<CR>
map <Leader>w :w<CR>
map <Leader>p :set paste<CR>
map <Leader>pp :set nopaste<CR>

" open link in brower
" simply you can use 'gx' to open url(must has schema)
fun! OpenLinkInBrower(site)
    let l:site = a:site
    if l:site !~? '\.[a-z]\{2,4}'
        let l:site = 'https://www.google.com/search?q=' . l:site
    elseif l:site !~? '^https\?:\/\/'
        let l:site = 'https://' . l:site
    endif
    call netrw#BrowseX(l:site, netrw#CheckIfRemote())
endfun
map <Leader>u :call OpenLinkInBrower(expand('<cWORD>'))<CR>

" jumps
" <C-o> back to previous cursor
" <C-i> go to next cursor
" <C-]> go to definition
" go to definition but show list when multi tags hit
nnoremap <C-]> g<C-]>
" <C-t> back to previous tag

" tab
map <Leader>n :tabnew<Space>
" move to previouse tab
map <C-Left> :tabp<CR>
" move to next tab
map <C-Right> :tabn<CR>
" close current tab
map <Leader>tc :tabc<CR>
" close other tabs
map <Leader>to :tabo<CR>

" window
" split window
map <Leader>ws :split<Space>
" vsplit window
map <Leader>wv :vsplit<Space>
map <Leader>wa :vertical resize -5<CR>
map <Leader>wd :vertical resize +5<CR>
map <Leader>ww :resize -5<CR>
map <Leader>wx :resize +5<CR>
" :hide  close current window
" :only  keep only this window open

" quickfix
" :cc     show error message
" :cp     move to previous error
" :cn     move to next error
" :cl     list all errors
" :cw     open error window if error exists
" :copen  open error window
" :cclose close error window
" :col    move to previous list
" :cnew   move to next list
map <Leader>z :cp<CR>
map <Leader>x :cn<CR>

" fold
set foldmethod=indent
" don't fold when open file
set foldlevelstart=99
"zi toggle enable and disable
"zv watch current line
"zm make fold
"zM make all fold
"zr open fold
"zR open all
"zc make current line fold
"zo open cuurent fold
"zd delete current fold
"zD delete all fold 

" multi line edit
" <C-v> -> block select -> <S-i>/<S-a> -> <Esc>

"""""""""""""" ctrlp
map <leader>f :CtrlPMixed<CR>
" map <leader>r :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }

"""""""""""""" mru.vim
map <leader>r :MRU<CR>

"""""""""""""" ack.vim
let g:ackprg = 'ag --nogroup --nocolor --column'
map <Leader>s :Ack --ignore-dir vendor<Space>
" change pwd of current window to current directory and search
map <Leader>ss :lcd %:h <bar> :Ack --ignore-dir vendor<Space>

""""""""""""" supertab
let g:SuperTabCompleteCase = 'ignore'
let g:SuperTabDefaultCompletionType = 'context'

"""""""""""" delimitMate
let g:delimitMate_matchpairs = "(:),[:],{:}"
let g:delimitMate_expand_cr = 1

"""""""""""""" nerdtree
let NERDTreeShowHidden=1
map <C-n> :NERDTreeToggle<CR>
map <C-m> :NERDTree %<CR>

"""""""""""""" vim-instant-markdown
let g:instant_markdown_slow = 1
let g:instant_markdown_autostart = 0
" let g:instant_markdown_open_to_the_world = 1
map <Leader>m :InstantMarkdownPreview<CR>

""""""""""""" languages

""""""""""""" vim-go
set autowrite
let g:go_list_type = "quickfix"
let g:go_gocode_propose_source = 1
"let g:go_highlight_types = 1
"let g:go_highlight_fields = 1
let g:go_auto_type_info = 1
nnoremap <leader>a :cclose<CR>
autocmd FileType go nmap <leader>b  <Plug>(go-build)
" autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>t  <Plug>(go-test)
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
" autocmd FileType go nmap <Leader>i <Plug>(go-info)
autocmd FileType go nmap <Leader>i <Plug>(go-imports)

"""""""""""""" php
autocmd FileType php nmap <Leader>c :!php-cs-fixer fix --rules=@PSR2 %<CR>
autocmd FileType php nmap <Leader>l :!php -l %<CR>

""""""""""""" phpcomplete.vim
let g:phpcomplete_relax_static_constraint = 1
let g:phpcomplete_enhance_jump_to_definition = 1
let g:phpcomplete_mappings = {
   \ 'jump_to_def': '<C-]>',
   \ 'jump_to_def_split': '<C-W><C-]>',
   \ 'jump_to_def_vsplit': '<C-W><C-\>',
   \ 'jump_to_def_tabnew': '<C-W><C-[>',
   \}

"""""""""""""" rust
let g:rustfmt_autosave = 1
let g:racer_experimental_completer = 1
autocmd FileType rust nmap <C-]> <Plug>(rust-def)

