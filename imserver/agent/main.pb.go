// Code generated by protoc-gen-go. DO NOT EDIT.
// source: main.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	main.proto

It has these top-level messages:
	PublishRequest
	RetResponse
	AddUserRequest
	DelUserRequest
	GetUserRequest
	GetUserResponse
	AddMembersRequest
	DelMembersRequest
	ListMembersRequest
	ListMembersResponse
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/mwitkow/go-proto-validators"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublishRequest struct {
	Topic    string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Payload  string `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
	Qos      int32  `protobuf:"zigzag32,3,opt,name=qos" json:"qos,omitempty"`
	Retained bool   `protobuf:"varint,4,opt,name=retained" json:"retained,omitempty"`
}

func (m *PublishRequest) Reset()                    { *m = PublishRequest{} }
func (m *PublishRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()               {}
func (*PublishRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PublishRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PublishRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *PublishRequest) GetQos() int32 {
	if m != nil {
		return m.Qos
	}
	return 0
}

func (m *PublishRequest) GetRetained() bool {
	if m != nil {
		return m.Retained
	}
	return false
}

type RetResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *RetResponse) Reset()                    { *m = RetResponse{} }
func (m *RetResponse) String() string            { return proto.CompactTextString(m) }
func (*RetResponse) ProtoMessage()               {}
func (*RetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RetResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type AddUserRequest struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *AddUserRequest) Reset()                    { *m = AddUserRequest{} }
func (m *AddUserRequest) String() string            { return proto.CompactTextString(m) }
func (*AddUserRequest) ProtoMessage()               {}
func (*AddUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AddUserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AddUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type DelUserRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *DelUserRequest) Reset()                    { *m = DelUserRequest{} }
func (m *DelUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DelUserRequest) ProtoMessage()               {}
func (*DelUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DelUserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type GetUserRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetUserRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type GetUserResponse struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *GetUserResponse) Reset()                    { *m = GetUserResponse{} }
func (m *GetUserResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUserResponse) ProtoMessage()               {}
func (*GetUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetUserResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GetUserResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GetUserResponse) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type AddMembersRequest struct {
	GroupId string   `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Members []string `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
}

func (m *AddMembersRequest) Reset()                    { *m = AddMembersRequest{} }
func (m *AddMembersRequest) String() string            { return proto.CompactTextString(m) }
func (*AddMembersRequest) ProtoMessage()               {}
func (*AddMembersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AddMembersRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *AddMembersRequest) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

type DelMembersRequest struct {
	GroupId string   `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Members []string `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
}

func (m *DelMembersRequest) Reset()                    { *m = DelMembersRequest{} }
func (m *DelMembersRequest) String() string            { return proto.CompactTextString(m) }
func (*DelMembersRequest) ProtoMessage()               {}
func (*DelMembersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DelMembersRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *DelMembersRequest) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

type ListMembersRequest struct {
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *ListMembersRequest) Reset()                    { *m = ListMembersRequest{} }
func (m *ListMembersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListMembersRequest) ProtoMessage()               {}
func (*ListMembersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListMembersRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

type ListMembersResponse struct {
	Members []string `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
}

func (m *ListMembersResponse) Reset()                    { *m = ListMembersResponse{} }
func (m *ListMembersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListMembersResponse) ProtoMessage()               {}
func (*ListMembersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListMembersResponse) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func init() {
	proto.RegisterType((*PublishRequest)(nil), "main.PublishRequest")
	proto.RegisterType((*RetResponse)(nil), "main.RetResponse")
	proto.RegisterType((*AddUserRequest)(nil), "main.AddUserRequest")
	proto.RegisterType((*DelUserRequest)(nil), "main.DelUserRequest")
	proto.RegisterType((*GetUserRequest)(nil), "main.GetUserRequest")
	proto.RegisterType((*GetUserResponse)(nil), "main.GetUserResponse")
	proto.RegisterType((*AddMembersRequest)(nil), "main.AddMembersRequest")
	proto.RegisterType((*DelMembersRequest)(nil), "main.DelMembersRequest")
	proto.RegisterType((*ListMembersRequest)(nil), "main.ListMembersRequest")
	proto.RegisterType((*ListMembersResponse)(nil), "main.ListMembersResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IM service

type IMClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*RetResponse, error)
}

type iMClient struct {
	cc *grpc.ClientConn
}

func NewIMClient(cc *grpc.ClientConn) IMClient {
	return &iMClient{cc}
}

func (c *iMClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*RetResponse, error) {
	out := new(RetResponse)
	err := grpc.Invoke(ctx, "/main.IM/Publish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IM service

type IMServer interface {
	Publish(context.Context, *PublishRequest) (*RetResponse, error)
}

func RegisterIMServer(s *grpc.Server, srv IMServer) {
	s.RegisterService(&_IM_serviceDesc, srv)
}

func _IM_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.IM/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.IM",
	HandlerType: (*IMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _IM_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}

// Client API for User service

type UserClient interface {
	Add(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*RetResponse, error)
	Del(ctx context.Context, in *DelUserRequest, opts ...grpc.CallOption) (*RetResponse, error)
	Get(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) Add(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*RetResponse, error) {
	out := new(RetResponse)
	err := grpc.Invoke(ctx, "/main.User/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Del(ctx context.Context, in *DelUserRequest, opts ...grpc.CallOption) (*RetResponse, error) {
	out := new(RetResponse)
	err := grpc.Invoke(ctx, "/main.User/Del", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Get(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/main.User/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserServer interface {
	Add(context.Context, *AddUserRequest) (*RetResponse, error)
	Del(context.Context, *DelUserRequest) (*RetResponse, error)
	Get(context.Context, *GetUserRequest) (*GetUserResponse, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.User/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Add(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.User/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Del(ctx, req.(*DelUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.User/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Get(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _User_Add_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _User_Del_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _User_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}

// Client API for Group service

type GroupClient interface {
	AddMembers(ctx context.Context, in *AddMembersRequest, opts ...grpc.CallOption) (*RetResponse, error)
	DelMembers(ctx context.Context, in *DelMembersRequest, opts ...grpc.CallOption) (*RetResponse, error)
	ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error)
}

type groupClient struct {
	cc *grpc.ClientConn
}

func NewGroupClient(cc *grpc.ClientConn) GroupClient {
	return &groupClient{cc}
}

func (c *groupClient) AddMembers(ctx context.Context, in *AddMembersRequest, opts ...grpc.CallOption) (*RetResponse, error) {
	out := new(RetResponse)
	err := grpc.Invoke(ctx, "/main.Group/AddMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) DelMembers(ctx context.Context, in *DelMembersRequest, opts ...grpc.CallOption) (*RetResponse, error) {
	out := new(RetResponse)
	err := grpc.Invoke(ctx, "/main.Group/DelMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupClient) ListMembers(ctx context.Context, in *ListMembersRequest, opts ...grpc.CallOption) (*ListMembersResponse, error) {
	out := new(ListMembersResponse)
	err := grpc.Invoke(ctx, "/main.Group/ListMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Group service

type GroupServer interface {
	AddMembers(context.Context, *AddMembersRequest) (*RetResponse, error)
	DelMembers(context.Context, *DelMembersRequest) (*RetResponse, error)
	ListMembers(context.Context, *ListMembersRequest) (*ListMembersResponse, error)
}

func RegisterGroupServer(s *grpc.Server, srv GroupServer) {
	s.RegisterService(&_Group_serviceDesc, srv)
}

func _Group_AddMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).AddMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Group/AddMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).AddMembers(ctx, req.(*AddMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_DelMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).DelMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Group/DelMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).DelMembers(ctx, req.(*DelMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Group_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Group/ListMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServer).ListMembers(ctx, req.(*ListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Group_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.Group",
	HandlerType: (*GroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMembers",
			Handler:    _Group_AddMembers_Handler,
		},
		{
			MethodName: "DelMembers",
			Handler:    _Group_DelMembers_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _Group_ListMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}

func init() { proto.RegisterFile("main.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xdd, 0x4a, 0xdc, 0x40,
	0x14, 0xc7, 0x99, 0xc4, 0x8f, 0xf5, 0xd8, 0x6e, 0xdd, 0xa9, 0x1f, 0x31, 0x58, 0x4c, 0xd3, 0x1b,
	0x91, 0x6a, 0xa8, 0x85, 0x16, 0xbc, 0x53, 0x84, 0xc5, 0xb6, 0x82, 0x04, 0x0a, 0xee, 0x55, 0x9d,
	0x75, 0x86, 0x38, 0x6c, 0x92, 0x89, 0x99, 0x59, 0x97, 0xde, 0xf6, 0x0d, 0x4a, 0x1f, 0xa1, 0x8f,
	0xd4, 0x07, 0x10, 0xa4, 0x7d, 0x8e, 0x96, 0x49, 0x76, 0xb2, 0x1b, 0x77, 0x0b, 0x4a, 0xa9, 0x57,
	0x99, 0x73, 0xce, 0xfc, 0xce, 0x7f, 0xce, 0xf9, 0xbb, 0x00, 0x09, 0xe1, 0xe9, 0x6e, 0x96, 0x0b,
	0x25, 0xf0, 0x8c, 0xfe, 0x76, 0x37, 0x22, 0x21, 0xa2, 0x98, 0x05, 0x24, 0xe3, 0x01, 0x49, 0x53,
	0xa1, 0x88, 0xe2, 0x22, 0x95, 0x65, 0x8d, 0xfb, 0x26, 0xe2, 0xea, 0xb2, 0xdf, 0xdd, 0xbd, 0x10,
	0x49, 0x90, 0x0c, 0xb8, 0xea, 0x89, 0x41, 0x10, 0x89, 0x9d, 0x22, 0xb9, 0x73, 0x4d, 0x62, 0x4e,
	0x89, 0x12, 0xb9, 0x0c, 0xaa, 0xcf, 0xf2, 0x9e, 0xff, 0x15, 0x41, 0xf3, 0xb4, 0xdf, 0x8d, 0xb9,
	0xbc, 0x0c, 0xd9, 0x55, 0x9f, 0x49, 0x85, 0x37, 0x60, 0x56, 0x89, 0x8c, 0x5f, 0x38, 0xc8, 0x43,
	0x5b, 0x0b, 0x87, 0x73, 0xb7, 0x37, 0x9b, 0xd6, 0x19, 0x0a, 0xcb, 0x20, 0xf6, 0x60, 0x3e, 0x23,
	0x9f, 0x63, 0x41, 0xa8, 0x63, 0xd5, 0xf2, 0x26, 0x8c, 0x5f, 0x80, 0x7d, 0x25, 0xa4, 0x63, 0x7b,
	0x68, 0xab, 0x75, 0xd8, 0xba, 0xbd, 0xd9, 0x7c, 0xbc, 0xf4, 0xdb, 0xfc, 0x21, 0xc7, 0x0e, 0x75,
	0x16, 0xbb, 0xd0, 0xc8, 0x99, 0x22, 0x3c, 0x65, 0xd4, 0x99, 0xf1, 0xd0, 0x56, 0x23, 0xac, 0xce,
	0xfe, 0x33, 0x58, 0x0c, 0x99, 0x0a, 0x99, 0xcc, 0x44, 0x2a, 0x19, 0x6e, 0x82, 0x25, 0x7a, 0x85,
	0x98, 0x46, 0x68, 0x89, 0x9e, 0x7f, 0x0e, 0xcd, 0x03, 0x4a, 0x3f, 0x4a, 0x96, 0x1b, 0xc5, 0xab,
	0x60, 0x71, 0x7a, 0x47, 0xae, 0xc5, 0xa9, 0x6e, 0xd2, 0x97, 0x2c, 0x4f, 0x49, 0xc2, 0x4a, 0xb1,
	0x61, 0x75, 0xd6, 0xb9, 0x8c, 0x48, 0x39, 0x10, 0x39, 0x2d, 0xa4, 0x2e, 0x84, 0xd5, 0xd9, 0x7f,
	0x09, 0xcd, 0x23, 0x16, 0x8f, 0x77, 0x18, 0x27, 0xa1, 0x3a, 0x49, 0x57, 0xb7, 0x99, 0xba, 0x6f,
	0x75, 0x07, 0x9e, 0x54, 0xd5, 0xa3, 0x07, 0x1a, 0xf9, 0xff, 0x24, 0xfb, 0x0c, 0x5a, 0x07, 0x94,
	0x9e, 0xb0, 0xa4, 0xcb, 0x72, 0x69, 0xb4, 0x3c, 0x87, 0x46, 0x94, 0x8b, 0x7e, 0xf6, 0x69, 0x62,
	0x42, 0xf3, 0x45, 0xfc, 0x98, 0xea, 0x95, 0x26, 0xe5, 0x25, 0xc7, 0xf2, 0x6c, 0x53, 0x71, 0x8e,
	0x42, 0x13, 0xd6, 0xe4, 0x23, 0x16, 0xff, 0x0f, 0xf2, 0x5b, 0xc0, 0x1f, 0xb8, 0x54, 0x0f, 0x46,
	0xfb, 0x01, 0x3c, 0xad, 0x5d, 0x1c, 0xce, 0xd2, 0x19, 0x75, 0x44, 0xba, 0x63, 0xd5, 0x69, 0xef,
	0x14, 0xac, 0xe3, 0x13, 0xfc, 0x0e, 0xe6, 0x87, 0x76, 0xc7, 0xcb, 0xbb, 0xc5, 0xff, 0x58, 0xdd,
	0xfd, 0x6e, 0xab, 0x8c, 0x8e, 0x19, 0xd0, 0x5f, 0xfd, 0xf2, 0xe3, 0xe7, 0x37, 0x6b, 0xc9, 0x5f,
	0x0c, 0xae, 0x5f, 0x05, 0x59, 0x59, 0xbe, 0x8f, 0xb6, 0xf7, 0x7e, 0x21, 0x98, 0xd1, 0x8b, 0xc4,
	0x6d, 0xb0, 0x0f, 0x28, 0x35, 0xc0, 0xba, 0x39, 0xa7, 0x01, 0xd7, 0x0a, 0x60, 0xcb, 0x7f, 0xa4,
	0x81, 0x7a, 0xb5, 0x01, 0xa1, 0x74, 0x1f, 0x6d, 0x6b, 0xd0, 0x11, 0x8b, 0x0d, 0xa8, 0xee, 0xc1,
	0xfb, 0x81, 0x28, 0x8b, 0x35, 0xe8, 0x3d, 0xd8, 0x6d, 0xa6, 0x0c, 0xa8, 0x6e, 0x4f, 0x77, 0xe5,
	0x4e, 0xf4, 0xaf, 0xb0, 0x88, 0x29, 0xfd, 0xce, 0xef, 0x16, 0xcc, 0xb6, 0xf5, 0xd8, 0x71, 0x07,
	0x60, 0xe4, 0x30, 0xbc, 0x56, 0xbd, 0xb7, 0xbe, 0xbe, 0x69, 0x4a, 0x37, 0x0b, 0xf8, 0xba, 0xbf,
	0xac, 0xe1, 0xc5, 0x0e, 0x83, 0x72, 0x31, 0xe6, 0xe9, 0x1d, 0x80, 0x91, 0xc5, 0x0c, 0x7a, 0xc2,
	0x74, 0x0f, 0x43, 0x0f, 0x87, 0x41, 0x61, 0x71, 0xcc, 0x2a, 0xd8, 0x29, 0x11, 0x93, 0xb6, 0x73,
	0xd7, 0xa7, 0x64, 0x86, 0x4d, 0xbc, 0xa2, 0x89, 0xeb, 0xaf, 0x4c, 0x34, 0x89, 0xb9, 0xd4, 0x53,
	0xea, 0xce, 0x15, 0x3f, 0xa8, 0xaf, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x1f, 0x3c, 0xd8,
	0xba, 0x05, 0x00, 0x00,
}
